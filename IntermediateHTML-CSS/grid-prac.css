body {
  font-family: Arial, Helvetica, sans-serif;
  font-size: 16px;
}

.wrapper {
    
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-auto-rows: 100px;
  border 
}

.box1 {
  grid-column-start: 1;
  grid-column-end: 4;
  grid-row-start: 1;
  grid-row-end: 3;
}

.box2 {
  grid-column-start: 1;
  grid-row-start: 3;
  grid-row-end: 5;
}

/*define a container element as a grid with display: grid, set the column and row sizes with grid-template-columns and grid-template-rows, and then place its child elements into the grid with grid-column and grid-row. 
Grid Container
The element on which display: grid is applied. It’s the direct parent of all the grid items.
Grid Item
The children (i.e. direct descendants) of the grid container. 
Grid Line
The dividing lines that make up the structure of the grid. They can be either vertical (“column grid lines”) or horizontal (“row grid lines”) and reside on either side of a row or column. 
Grid Cell
The space between two adjacent row and two adjacent column grid lines. It’s a single “unit” of the grid. 
Grid Track
The space between two adjacent grid lines. You can think of them as the columns or rows of the grid.
Grid Area
The total space surrounded by four grid lines. A grid area may be composed of any number of grid cells. 

////PROPERTIES FOR THE PARENT CONTAINER
*display- display: grid;
Defines the element as a grid container and establishes a new grid formatting context for its contents.
Values:
grid – generates a block-level grid
inline-grid – generates an inline-level grid

*grid-template-columns
*grid-template-rows (  grid-template-columns: 50px 50px;
  grid-template-rows: 50px 50px;)
-The values represent the track size, and the space between them represents the grid line.
-The fr unit allows you to set the size of a track as a fraction of the free space of the grid container. For example, this will set each item to one third the width of the grid container:

.container {
  grid-template-columns: 1fr 1fr 1fr;
}

*grid-auto-columns
grid-auto-rows
Specifies the size of any auto-generated grid tracks (aka implicit grid tracks).

*grid-auto-flow
If you have grid items that you don’t explicitly place on the grid, the auto-placement algorithm kicks in to automatically place the items.

*grid-template-areas
Defines a grid template by referencing the names of the grid areas which are specified with the grid-area property. 
Repeating the name of a grid area causes the content to span those cells. 
A period signifies an empty cell:
The below will create a grid that’s four columns wide by three rows tall. The entire top row will be composed of the header area. The middle row will be composed of two main areas, one empty cell, and one sidebar area. The last row is all footer.

you’re not naming lines with this syntax, just areas.


.item-a {
  grid-area: header;
}
.item-b {
  grid-area: main;
}
.item-c {
  grid-area: sidebar;
}
.item-d {
  grid-area: footer;
}

.container {
  display: grid;
  grid-template-columns: 50px 50px 50px 50px;
  grid-template-rows: auto;
  grid-template-areas: 
    "header header header header"
    "main main . sidebar"
    "footer footer footer footer";
}


*grid-template
A shorthand for setting grid-template-rows, grid-template-columns, and grid-template-areas in a single declaration.


*column-gap
row-gap
grid-column-gap
grid-row-gap

Specifies the size of the grid lines. You can think of it like setting the width of the gutters between the columns/rows.
<line-size> – a length value
eg:.container {
  grid-template-columns: 100px 50px 100px;
  grid-template-rows: 80px auto 80px; 
  column-gap: 10px;
  row-gap: 15px;
}
*justify-items
Aligns grid items along the inline (row) axis (as opposed to align-items which aligns along the block (column) axis). This value applies to all grid items inside the container.
Values:

start – aligns items to be flush with the start edge of their cell
end – aligns items to be flush with the end edge of their cell
center – aligns items in the center of their cell
stretch – fills the whole width of the cell (this is the default)

eg .container {
  justify-items: start;
}

This behavior can also be set on individual grid items via the justify-self property.



*align-items
Aligns grid items along the block (column) axis (as opposed to justify-items which aligns along the inline (row) axis). This value applies to all grid items inside the container.

Values:

stretch – fills the whole height of the cell (this is the default)
start – aligns items to be flush with the start edge of their cell
end – aligns items to be flush with the end edge of their cell
center – aligns items in the center of their cell
baseline – align items along text baseline. There are modifiers to baseline — first baseline and last baseline which will use the baseline from the first or last line in the case of multi-line text.

*place-items
place-items sets both the align-items and justify-items properties in a single declaration.

Values:

<align-items> / <justify-items> – The first value sets align-items, the second value justify-items. If the second value is omitted, the first value is assigned to both properties.

.center {
  display: grid;
  place-items: center;
}


*justify-content- horizontal within grid container
Sometimes the total size of your grid might be less than the size of its grid container. This could happen if all of your grid items are sized with non-flexible units like px. In this case you can set the alignment of the grid within the grid container. This property aligns the grid along the inline (row) axis (as opposed to align-content which aligns the grid along the block (column) axis).

Values:

start – aligns the grid to be flush with the start edge of the grid container
end – aligns the grid to be flush with the end edge of the grid container
center – aligns the grid in the center of the grid container
stretch – resizes the grid items to allow the grid to fill the full width of the grid container
space-around – places an even amount of space between each grid item, with half-sized spaces on the far ends
space-between – places an even amount of space between each grid item, with no space at the far ends
space-evenly – places an even amount of space between each grid item, including the far ends


align-content -vertical within grid container
Values:

start – aligns the grid to be flush with the start edge of the grid container
end – aligns the grid to be flush with the end edge of the grid container
center – aligns the grid in the center of the grid container
stretch – resizes the grid items to allow the grid to fill the full height of the grid container
space-around – places an even amount of space between each grid item, with half-sized spaces on the far ends
space-between – places an even amount of space between each grid item, with no space at the far ends
space-evenly – places an even amount of space between each grid item, including the far ends

//////PROPERTIES OF THE CHILDREN (GRID ITEMS)
*grid-column-start
grid-column-end
grid-row-start
grid-row-end
Determines a grid item’s location within the grid by referring to specific grid lines. grid-column-start/grid-row-s

*grid-column
grid-row

*grid-area

*justify-self

*align-self

*place-self

*Sizing Keywords

*The repeat() Function and Keywords







*/
